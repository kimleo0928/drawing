<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>전문적인 그림 그리기 프로그램</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
            font-family: 'Arial', sans-serif;
        }
        #canvas-container {
            text-align: center;
            margin-bottom: 20px;
        }
        canvas {
            border: 5px solid #8b4513; /* 갈색 테두리 */
            cursor: crosshair;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .toolbar {
            margin-bottom: 10px;
            text-align: center;
        }
        .toolbar label, .toolbar button {
            margin-right: 10px;
        }
        .toolbar select, .toolbar input[type="color"], .toolbar input[type="range"] {
            vertical-align: middle;
            margin-right: 5px;
        }
        .color-palette {
            display: flex;
            justify-content: center;
            margin-bottom: 10px;
        }
        .color-palette .color-box {
            width: 30px;
            height: 30px;
            border: 1px solid #ccc;
            margin: 0 5px;
            cursor: pointer;
        }
        .color-palette .color-box.selected {
            border-width: 3px;
        }
    </style>
</head>
<body>
    <div id="canvas-container">
        <canvas id="myCanvas" width="794" height="1123"></canvas>
    </div>
    <div class="toolbar">
        <label>펜 두께:
            <select id="penWidth">
                <option value="1">1px</option>
                <option value="3">3px</option>
                <option value="5">5px</option>
                <option value="7">7px</option>
            </select>
        </label>
        <label>펜 종류:
            <select id="penType">
                <option value="pen">만년필</option>
                <option value="marker">싸인펜</option>
                <option value="ballpoint">볼펜</option>
                <option value="pencil">연필</option>
                <option value="crayon">크레용</option>
            </select>
        </label>
        <div class="color-palette" id="colorPalette">
            <div class="color-box" style="background-color: #000000"></div>
            <div class="color-box" style="background-color: #ffffff"></div>
            <div class="color-box" style="background-color: #ff0000"></div>
            <div class="color-box" style="background-color: #00ff00"></div>
            <div class="color-box" style="background-color: #0000ff"></div>
            <div class="color-box" style="background-color: #ffff00"></div>
            <div class="color-box" style="background-color: #ff00ff"></div>
            <div class="color-box" style="background-color: #00ffff"></div>
            <div class="color-box" style="background-color: #ff8000"></div>
            <div class="color-box" style="background-color: #8000ff"></div>
            <div class="color-box" style="background-color: #0080ff"></div>
            <div class="color-box" style="background-color: #00ff80"></div>
            <div class="color-box" style="background-color: #ff0080"></div>
            <div class="color-box" style="background-color: #80ff00"></div>
            <div class="color-box" style="background-color: #800000"></div>
            <div class="color-box" style="background-color: #808000"></div>
            <div class="color-box" style="background-color: #008080"></div>
            <div class="color-box" style="background-color: #800080"></div>
            <div class="color-box" style="background-color: #808080"></div>
            <div class="color-box" style="background-color: #ff6666"></div>
        </div>
        <button onclick="clearCanvas()">전체 지우기</button>
    </div>
    <div class="toolbar">
        <label>지우개 크기:
            <input type="range" id="eraserSize" min="5" max="30" value="10">
        </label>
        <button onclick="useEraser()">지우개 사용</button>
    </div>
    <div class="toolbar">
        <label>색상 선택 (빨레트 형식):
            <input type="color" id="colorPicker" onchange="changePenColor()">
        </label>
        <button onclick="mixColors()">선택된 색상 섞기</button>
        <div id="mixedColor" style="display: inline-block; width: 30px; height: 30px; margin-left: 10px; border: 1px solid #ccc;"></div>
    </div>
    
    <script>
        const canvas = document.getElementById('myCanvas');
        const context = canvas.getContext('2d');
        const penWidthSelect = document.getElementById('penWidth');
        const penTypeSelect = document.getElementById('penType');
        const eraserSizeRange = document.getElementById('eraserSize');
        const colorPalette = document.getElementById('colorPalette');
        const colorPicker = document.getElementById('colorPicker');
        const mixedColorDiv = document.getElementById('mixedColor');
        
        let isDrawing = false;
        let lastX = 0;
        let lastY = 0;
        let isDrawingLine = false;
        let lineStartX = 0;
        let lineStartY = 0;
        let lineEndX = 0;
        let lineEndY = 0;
        
        function startDrawing(e) {
            isDrawing = true;
            [lastX, lastY] = [e.offsetX, e.offsetY];
        }
        
        function draw(e) {
            if (!isDrawing) return;
            
            context.lineWidth = penWidthSelect.value;
            context.lineCap = 'round';
            context.strokeStyle = getCurrentColor();
            
            const mouseX = e.offsetX;
            const mouseY = e.offsetY;
            
            if (penTypeSelect.value === 'pen') {
                context.beginPath();
                context.moveTo(lastX, lastY);
                context.lineTo(mouseX, mouseY);
                context.stroke();
                [lastX, lastY] = [mouseX, mouseY];
            } else if (penTypeSelect.value === 'marker') {
                context.beginPath();
                context.moveTo(lastX, lastY);
                context.lineTo(mouseX, mouseY);
                context.lineWidth = penWidthSelect.value * 2;
                context.stroke();
                [lastX, lastY] = [mouseX, mouseY];
            } else if (penTypeSelect.value === 'ballpoint') {
                context.beginPath();
                context.arc(mouseX, mouseY, penWidthSelect.value / 2, 0, 2 * Math.PI);
                context.fillStyle = getCurrentColor();
                context.fill();
            } else if (penTypeSelect.value === 'pencil') {
                context.beginPath();
                context.arc(mouseX, mouseY, penWidthSelect.value / 2, 0, 2 * Math.PI);
                context.fillStyle = getCurrentColor();
                context.fill();
            } else if (penTypeSelect.value === 'crayon') {
                context.beginPath();
                context.arc(mouseX, mouseY, penWidthSelect.value, 0, 2 * Math.PI);
                context.fillStyle = getCurrentColor();
                context.fill();
            }
        }
        
        function stopDrawing() {
            isDrawing = false;
            
            if (isDrawingLine) {
                setTimeout(drawPerfectLine, 2000); // 2초 후 완벽한 직선으로 그리기
            }
        }
        
        function drawPerfectLine() {
            context.beginPath();
            context.moveTo(lineStartX, lineStartY);
            context.lineTo(lineEndX, lineEndY);
            context.stroke();
            
            isDrawingLine = false;
        }
        
        function clearCanvas() {
            context.clearRect(0, 0, canvas.width, canvas.height);
        }
        
        function useEraser() {
            context.lineWidth = eraserSizeRange.value;
            context.lineCap = 'round';
            context.strokeStyle = '#ffffff'; // 지우개 색상은 흰색으로 설정
            canvas.addEventListener('mousemove', erase);
            canvas.addEventListener('mouseup', stopErasing);
            canvas.addEventListener('mouseout', stopErasing);
        }
        
        function erase(e) {
            if (!isDrawing) return;
            const mouseX = e.offsetX;
            const mouseY = e.offsetY;
            
            context.beginPath();
            context.arc(mouseX, mouseY, eraserSizeRange.value / 2, 0, 2 * Math.PI);
            context.fillStyle = '#ffffff'; // 지우개 색상은 흰색으로 설정
            context.fill();
        }
        
        function stopErasing() {
            canvas.removeEventListener('mousemove', erase);
            canvas.removeEventListener('mouseup', stopErasing);
            canvas.removeEventListener('mouseout', stopErasing);
        }
        
        function changePenColor() {
            mixedColorDiv.style.backgroundColor = colorPicker.value;
        }
        
        function mixColors() {
            const mixedColor = mixedColorDiv.style.backgroundColor;
            if (mixedColor) {
                colorPalette.innerHTML += `<div class="color-box" style="background-color: ${mixedColor}"></div>`;
            }
        }
        
        function getCurrentColor() {
            const selectedColor = colorPalette.querySelector('.selected');
            if (selectedColor) {
                return selectedColor.style.backgroundColor;
            } else {
                return '#000000'; // 기본 검정색
            }
        }
        
        colorPalette.addEventListener('click', function(e) {
            const clickedColor = e.target;
            if (!clickedColor.classList.contains('color-box')) return;
            
            const selectedColor = colorPalette.querySelector('.selected');
            if (selectedColor) {
                selectedColor.classList.remove('selected');
            }
            clickedColor.classList.add('selected');
        });
        
        canvas.addEventListener('mousedown', function(e) {
            if (penTypeSelect.value === 'line') {
                isDrawingLine = true;
                [lineStartX, lineStartY] = [e.offsetX, e.offsetY];
                [lineEndX, lineEndY] = [e.offsetX, e.offsetY];
            } else {
                startDrawing(e);
            }
        });
        
        canvas.addEventListener('mousemove', function(e) {
            if (penTypeSelect.value === 'line' && isDrawingLine) {
                [lineEndX, lineEndY] = [e.offsetX, e.offsetY];
            } else {
                draw(e);
            }
        });
        
        canvas.addEventListener('mouseup', function(e) {
            if (penTypeSelect.value !== 'line') {
                stopDrawing();
            }
        });
        
        canvas.addEventListener('mouseout', function(e) {
            if (penTypeSelect.value !== 'line') {
                stopDrawing();
            }
        });
    </script>
</body>
</html>
